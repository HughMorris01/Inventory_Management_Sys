package controller;

import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import model.InHouse;
import model.Inventory;
import model.Outsourced;
import model.Part;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

/** This is the controller class for the AddPart FXML document and not meant to be instantiated.
 * The class grabs data entered into text fields and uses it to create a new Part object and then add that object to
 * the Inventory class' static observable list of parts. There are also validation checks and exception handling
 * implemented in order to verify that the inputs are of the correct data types and also adhere to specified logical rules.
 * @author Greg Farrell
 * @version 1.0
 * */
public class AddPartScreenController implements Initializable {
    /** Radio button setting the InHouse class. */
    public RadioButton inHouseRadioButton;
    /** Radio button setting the Outsourced class. */
    public RadioButton outSourcedRadioButton;
    /** Toggle group linking the inHouseRadioButton and outSourcedRadioButton. */
    public ToggleGroup addPartToggle;
    /** Radio button label, changes depending on which button is selected. */
    public Label radioButtonLabel;
    /** Disabled text field for the part ID, which is autogenerated. */
    public TextField iDTextField;
    /** Part name text field. */
    public TextField nameTextField;
    /** Part maximum text field. */
    public TextField maxTextField;
    /** Part minimum text field. */
    public TextField minTextField;
    /** Part stock text field. */
    public TextField inventoryTextField;
    /** Part price text field. */
    public TextField priceTextField;
    /** Machine ID or Company Name text field depending on which radio button is selected. */
    public TextField radioButtonTextField;

    private static String radioInfo1;
    private static String radioInfo2;

    /** This method is called by the FXMLLoader.load() call contained in the toAddPart() method of the InventoryMainScreeController class.
     * The method initializes two static fields as empty so that they can be utilized to pass data between the
     * radioButtonTextField depending on which radio button is selected.
     * @param resourceBundle An unreferenced ResourceBundle object passed automatically
     * @param url An unreferenced URL object passed automatically
     * */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        radioInfo1 = "";
        radioInfo2 = "";
    }

    /** This method is an event handler for the Cancel button that sends the program back to the main screen.
     * The method loads the FXML document for the main inventory screen, passes that to a new scene and then sets the
     * stage with the new scene.
     * @param actionEvent Passed from the On Action event listener in the AddPartScreen FXML document
     * @throws IOException The FXMLLoader.load() call will throw this exception if the FXML document can't be found.
     */
    public void backToMain(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/InventoryMainScreen.fxml"));
        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 800, 600);
        stage.setTitle("Inventory Main Screen");
        stage.setScene(scene);
        stage.show();
    }

    /** This method is an event handler for the inHouseRadio Button that sets the radioButtonLabel to "Machine ID: "
     *  The method also grabs the text from the radioButtonTextField and makes a copy of it that is used to repopulate
     *  the text field if the radio button gets toggled back so the user doesn't need to reenter it.
     * @param actionEvent Passed from the On Action event listener in the AddPartScreen FXML document
     */
    public void inHouseMachineID(ActionEvent actionEvent) {
        radioInfo2 = radioButtonTextField.getText();
        radioButtonLabel.setText("Machine ID:");
        if (radioInfo1.isEmpty()) {
            radioButtonTextField.clear();
        }
        else {
            radioButtonTextField.setText(radioInfo1);
        }
    }

    /** This method is an event handler for the outSourcedRadio Button that sets the radioButtonLabel to "Company Name: "
     *  The method also grabs the text from the radioButtonTextField and makes a copy of it that is used to repopulate
     *  the text field if the radio button gets toggled back so the user doesn't need to reenter it.
     * @param actionEvent Passed from the On Action event listener in the AddPartScreen FXML document
     */
    public void outSourcedCompanyName(ActionEvent actionEvent) {
        radioInfo1 = radioButtonTextField.getText();
        radioButtonLabel.setText("Company Name:");

        if (radioInfo2.isEmpty()) {
            radioButtonTextField.clear();
        }
        else {
            radioButtonTextField.setText(radioInfo2);
        }
    }

    /** This method creates a new part object and then adds the part to the static observable list in the Inventory class.
     * The method grabs the data entered in the various text fields and then calls the appropriate constructor, depending
     * on which radio button is selected for InHouse vs OutSourced. There are also validation checks and exception
     * handling to ensure that the data entered are of the appropriate types and adhere various logical rules.
     * @param actionEvent Passed from the On Action event listener in the AddPartScreen FXML document
     * @see InHouse#InHouse(int, String, double, int, int, int, int)
     * @see Outsourced#Outsourced(int, String, double, int, int, int, String)
     * */
    public void savePart(ActionEvent actionEvent) {
        int id;
        String companyName;
        String name;
        double price;
        int stock;
        int min;
        int max;
        int machineID;

        try {
            if (inHouseRadioButton.isSelected()) {

                id = Inventory.getNextUniquePartId();
                name = nameTextField.getText();
                price = Double.parseDouble(priceTextField.getText());
                min = Integer.parseInt(minTextField.getText());
                max = Integer.parseInt(maxTextField.getText());
                stock = Integer.parseInt(inventoryTextField.getText());

                if (min > max) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Invalid Input");
                    alert.setContentText("Minimum must be less than or equal to Maximum.");
                    alert.show();
                    return;
                }

                if ((min > stock) || (stock > max)) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Invalid Input");
                    alert.setContentText("Inventory must be between Minimum and Maximum.");
                    alert.show();
                    return;
                }

                String tempText = radioButtonTextField.getText();
                if (tempText.isEmpty()) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Blank Field");
                    alert.setContentText("A Machine ID must be entered.");
                    alert.show();
                    return;
                }

                machineID = Integer.parseInt(maxTextField.getText());

                Part newPart = new InHouse(id, name, price, stock, min, max, machineID);
                Inventory.getAllParts().add(newPart);

            } else {

                id = Inventory.getNextUniqueProductId();
                name = nameTextField.getText();
                price = Double.parseDouble(priceTextField.getText());
                min = Integer.parseInt(minTextField.getText());
                max = Integer.parseInt(maxTextField.getText());
                stock = Integer.parseInt(inventoryTextField.getText());

                if (min > max) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Invalid Input");
                    alert.setContentText("Minimum must be less than or equal to Maximum.");
                    alert.show();
                    return;
                }

                if ((min > stock) || (stock > max)) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Invalid Input");
                    alert.setContentText("Inventory must be between Minimum and Maximum.");
                    alert.show();
                    return;
                }

                String tempText = radioButtonTextField.getText();
                if (tempText.isEmpty()) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Blank Field");
                    alert.setContentText("A Company name must be entered.");
                    alert.show();
                    return;
                }

                companyName = radioButtonTextField.getText();

                Part newPart = new Outsourced(id, name, price, stock, min, max, companyName);
                Inventory.addPart(newPart);
            }

            Parent root = FXMLLoader.load(getClass().getResource("/view/InventoryMainScreen.fxml"));
            Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
            Scene scene = new Scene(root, 800, 600);
            stage.setTitle("Inventory Main Screen");
            stage.setScene(scene);
            stage.show();

        }
        catch (NumberFormatException | IOException exception) {
            Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter valid values in the input fields");
            alert.setTitle("Invalid Input Type");
            alert.setContentText(exception.getLocalizedMessage());
            alert.show();
        }
    }
}
